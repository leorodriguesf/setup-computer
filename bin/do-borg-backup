#!/usr/bin/env python3

import subprocess
import sys
import os
import argparse
import getpass
from datetime import datetime


def info(message):
    """Prints a timestamped informational message."""
    print(f"\n{datetime.now()} {message}\n", file=sys.stderr)

def run_command(command, description, env=None):
    """Runs a shell command and returns its exit code."""
    info(f"Starting: {description}")
    result = subprocess.run(command, shell=True, env=env)
    return result.returncode

def main():
    env = dict(os.environ)

    parser = argparse.ArgumentParser(description='Perform Borg backup')
    parser.add_argument('repository', help='Borg repository')
    parser.add_argument('--passphrase', help='Borg passphrase')
    args = parser.parse_args()

    try:
        if not "BORG_PASSCOMMAND" in os.environ:
            if args.passphrase:
                env["BORG_PASSPHRASE"] = args.passphrase
            else:
                env["BORG_PASSPHRASE"] = getpass.getpass(f"Enter passphrase for key {args.repository}: ")

        env["BORG_REPO"] = args.repository

        info("Starting backup")

        # Backup step
        backup_command = (
            "borg create "
            "--verbose "
            "--filter AME "
            "--list "
            "--stats "
            "--show-rc "
            "--compression lz4 "
            "--exclude-caches "
            "--exclude '**/node_modules' "
            "--exclude '**/dist' "
            "--exclude '**/*cache*' "
            "--exclude '**/.DS_Store' "
            "--exclude '**/dotbot' "
            "::{hostname}-{now} "
            "~/study ~/personal ~/archive ~/misc ~/templates ~/Library/Mobile\ Documents/iCloud~com~tophatch~Concepts/Documents ~/Library/Mobile\ Documents/com~apple~CloudDocs/Obsidian"
        )
        backup_exit = run_command(backup_command, "Backup directories", env)

        # Prune step
        info("Pruning repository")
        prune_command = (
            "borg prune "
            "--list "
            "--glob-archives '{hostname}-*' "
            "--show-rc "
            "--keep-daily 7 "
            "--keep-weekly 4 "
            "--keep-monthly 6"
        )
        prune_exit = run_command(prune_command, "Prune repository", env)

        # Compact step
        info("Compacting repository")
        compact_command = "borg compact"
        compact_exit = run_command(compact_command, "Compact repository", env)

        # Determine the global exit code
        global_exit = max(backup_exit, prune_exit, compact_exit)

        if global_exit == 0:
            info("Backup, Prune, and Compact finished successfully")
        elif global_exit == 1:
            info("Backup, Prune, and/or Compact finished with warnings")
        else:
            info("Backup, Prune, and/or Compact finished with errors")

        sys.exit(global_exit)

    except KeyboardInterrupt:
        info("Backup interrupted")
        sys.exit(2)

if __name__ == "__main__":
    main()