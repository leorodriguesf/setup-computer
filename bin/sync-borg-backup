#!/usr/bin/env python3

import subprocess
import sys
import os
import argparse
import getpass
from datetime import datetime


def info(message):
    """Prints a timestamped informational message."""
    print(f"\n{datetime.now()} {message}\n", file=sys.stderr)


def run_command(command, description, env=None):
    """Runs a shell command and returns its exit code."""
    info(f"Starting: {description}")
    result = subprocess.run(command, shell=True, env=env)
    return result.returncode


def get_last_backup(env):
    """Retrieves the timestamp of the last backup from Borg."""
    command = "borg list | awk '{print $3}' | tail -n 1"
    result = subprocess.run(command, shell=True, capture_output=True, text=True, env=env)
    return result.stdout.strip()


def do_borg_backup(repository, passphrase, env):
    """Call the do-borg-backup script."""
    info("Starting backup by calling do-borg-backup.")
    return run_command(f'do-borg-backup {repository} --passphrase={passphrase}', "Backup using do-borg-backup", env)


def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Check last backup and perform a new one if needed.")
    parser.add_argument('repository', help='Borg repository')
    args = parser.parse_args()

    env = dict(os.environ)

    borg_passphrase = getpass.getpass(f"Enter passphrase for key {args.repository}: ")
    env["BORG_REPO"] = args.repository
    env["BORG_PASSPHRASE"] = borg_passphrase

    last_back = get_last_backup(env)

    if not last_back:
        info("No previous backup found. Starting backup.")
        do_borg_backup(args.repository,borg_passphrase, env)
        sys.exit(0)

    now = int(datetime.now().timestamp())
    last_backup_timestamp = int(datetime.strptime(last_back, "%Y-%m-%d").timestamp())
    # 86400 is the total number of seconds in one day
    diff = (now - last_backup_timestamp) // 86400

    if diff >= 1:
        info("More than a day since the last backup. Starting backup.")
        do_borg_backup(env)
    else:
        info("Daily backup already done.")


if __name__ == "__main__":
    main()
