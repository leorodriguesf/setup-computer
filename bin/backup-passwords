#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status
set -euo pipefail

ISO_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
MASTER_PASSWORD=$(op read "op://Personal/1Password/password")

cd ~/personal/projects/setup-computer/secrets

CURRENT_BRANCH=$(git branch --show-current)

echo "Updating passwords backup credentials on github repo (branch $CURRENT_BRANCH)..."

ansible-vault \
    encrypt <(op item list --tags emergency --format=json | op item get - --reveal) \
    --vault-password-file=<(echo "$MASTER_PASSWORD") \
    --output ~/personal/projects/setup-computer/secrets/passwords-backup.config

git add passwords-backup.config

(git commit -m "Update passwords backup data on $ISO_DATE" && git push -u origin "$CURRENT_BRANCH") || git push -u origin "$CURRENT_BRANCH"

export BORG_PASSPHRASE="$MASTER_PASSWORD"
BORG_REPO_REMOTE=$(op read "op://Personal/passwords-backup-remote/URL")
BORG_REPO_LOCAL_1="/Volumes/$(op read "op://Personal/passwords-backup-local-1/URL")"
BORG_REPO_LOCAL_2="/Volumes/$(op read "op://Personal/passwords-backup-local-2/URL")"
BORG_REPO_LOCAL_3="/Volumes/$(op read "op://Personal/passwords-backup-local-3/URL")"
BACKUP_NAME="1password-backup-{now}"

TMPFILE=$(mktemp)

trap 'rm -f "$TMPFILE"; log "Script terminated unexpectedly."; exit 1' INT TERM ERR

create-backup() {
    BORG_REPO=$1 borg create --verbose --list --show-rc --stats --compression lz4 "$1::$BACKUP_NAME" "$TMPFILE"
}

prune-backup() {
    BORG_REPO=$1 borg prune --list --glob-archives '1password-backup-*' --show-rc --keep-daily 7 --keep-weekly 4 --keep-monthly 6
}

compact-backup() {
    BORG_REPO=$1 borg compact --show-rc
}

echo "Fetching 1Password items..."
op item list --format=json | op item get --reveal >"$TMPFILE"

echo "Running borg backup remote..."
create-backup "$BORG_REPO_REMOTE"
echo "Running borg prune remote..."
prune-backup "$BORG_REPO_REMOTE"
echo "Running borg compact remote..."
compact-backup "$BORG_REPO_REMOTE"

for repo in "$BORG_REPO_LOCAL_1" "$BORG_REPO_LOCAL_2" "$BORG_REPO_LOCAL_3"; do
    if [[ -d "$repo" ]]; then
        echo "Running borg backup local for $repo..."
        create-backup "$repo"
        echo "Running borg prune for $repo..."
        prune-backup "$repo"
        echo "Running borg compact for $repo..."
        prune-backup "$repo"
    else
        echo "Local device for $repo not connected. Skipping..."
    fi
done

# Clean up
echo "Backup complete. Cleaning up temporary files."
rm -f "$TMPFILE"
